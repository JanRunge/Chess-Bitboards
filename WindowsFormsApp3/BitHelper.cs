using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WindowsFormsApp3
{
    static class BitHelper
    {
        //----------------------------1       1       1       1       1       1       1       1
        //----------------------------1234567812345678123456781234567812345678123456781234567812345678     
        public static ulong[] Rank = new ulong[] {  0B0000000000000000000000000000000000000000000000000000000011111111,
                                                    0B0000000000000000000000000000000000000000000000001111111100000000,
                                                    0B0000000000000000000000000000000000000000111111110000000000000000,
                                                    0B0000000000000000000000000000000011111111000000000000000000000000,
                                                    0B0000000000000000000000001111111100000000000000000000000000000000,
                                                    0B0000000000000000111111110000000000000000000000000000000000000000,
                                                    0B0000000011111111000000000000000000000000000000000000000000000000,
                                                    0B1111111100000000000000000000000000000000000000000000000000000000,
         };
        public static ulong[] File = new ulong[] { 0B0000000100000001000000010000000100000001000000010000000100000001,
                                                    0B0000001000000010000000100000001000000010000000100000001000000010,
                                                    0B0000010000000100000001000000010000000100000001000000010000000100,
                                                    0B0000100000001000000010000000100000001000000010000000100000001000,
                                                    0B0001000000010000000100000001000000010000000100000001000000010000,
                                                    0B0010000000100000001000000010000000100000001000000010000000100000,
                                                    0B0100000001000000010000000100000001000000010000000100000001000000,
                                                    0B1000000010000000100000001000000010000000100000001000000010000000,

        };
        //------------------------------------------------8       7       6       5       4       3       2       1
        //------------------------------------------------8765432187654321876543218765432187654321876543218765432187654321
        public static ulong[] Diagonal = new ulong[] {  0B0000000000000000000000000000000000000000000000000000000000000001,
                                                        0B0000000000000000000000000000000000000000000000000000000100000010,
                                                        0B0000000000000000000000000000000000000000000000010000001000000100,
                                                        0B0000000000000000000000000000000000000001000000100000010000001000,
                                                        0B0000000000000000000000000000000100000010000001000000100000010000,
                                                        0B0000000000000000000000010000001000000100000010000001000000100000,
                                                        0B0000000000000001000000100000010000001000000100000010000001000000,
                                                        0B0000000100000010000001000000100000010000001000000100000010000000,
        //------------------------------------------------8       7       6       5       4       3       2       1
        //------------------------------------------------8765432187654321876543218765432187654321876543218765432187654321
                                                        0B0000001000000100000010000001000000100000010000001000000000000000,
                                                        0B0000010000001000000100000010000001000000100000000000000000000000,
                                                        0B0000100000010000001000000100000010000000000000000000000000000000,
                                                        0B0001000000100000010000001000000000000000000000000000000000000000,
                                                        0B0010000001000000100000000000000000000000000000000000000000000000,
                                                        0B0100000010000000000000000000000000000000000000000000000000000000,
                                                        0B1000000000000000000000000000000000000000000000000000000000000000
        };
        //----------------------------------------------------8       7       6       5       4       3       2       1
        //----------------------------------------------------8765432187654321876543218765432187654321876543218765432187654321
        public static ulong[] Antidiagonal = new ulong[] {  0B0000000100000000000000000000000000000000000000000000000000000000,
                                                            0B0000001000000001000000000000000000000000000000000000000000000000,
                                                            0B0000010000000010000000010000000000000000000000000000000000000000,
                                                            0B0000100000000100000000100000000100000000000000000000000000000000,
                                                            0B0001000000001000000001000000001000000001000000000000000000000000,
                                                            0B0010000000010000000010000000010000000010000000010000000000000000,
                                                            0B0100000000100000000100000000100000000100000000100000000100000000,
                                                            0B1000000001000000001000000001000000001000000001000000001000000001,

                                                            0B0000000010000000010000000010000000010000000010000000010000000010,
                                                            0B0000000000000000100000000100000000100000000100000000100000000100,
                                                            0B0000000000000000000000001000000001000000001000000001000000001000,
                                                            0B0000000000000000000000000000000010000000010000000010000000010000,
                                                            0B0000000000000000000000000000000000000000100000000100000000100000,
                                                            0B0000000000000000000000000000000000000000000000001000000001000000,
                                                            0B0000000000000000000000000000000000000000000000000000000010000000,

        };





        public static int setBit(UInt64 BitBoard)
        {
        //returns the index of the first active bit in the bitboard
        byte[] bytes = BitConverter.GetBytes(BitBoard);
        int bitPos = 0;
        while (bitPos < 8 * bytes.Length)//durch die bits des boards loopen
        {
            int byteIndex = bitPos / 8;
            int offset = bitPos % 8;
            bool isSet = (bytes[byteIndex] & (1 << offset)) != 0;
            
            // isSet = [True] if the bit at bitPos is set, false otherwise
            if (isSet)
            {
                return (bitPos);
            }
                bitPos++;


            }
        return 0;
    }
    public static UInt64 LSB(UInt64 BitBoard)
    {
        //returns A bitboard with only the least significant bit of the input active
        return (BitBoard)&(~(BitBoard-1));
    }
    public static UInt64 reverse(UInt64 value)
        {
            return (value & 0x00000000000000FFUL) << 56 | (value & 0x000000000000FF00UL) << 40 |
                   (value & 0x0000000000FF0000UL) << 24 | (value & 0x00000000FF000000UL) << 8 |
                   (value & 0x000000FF00000000UL) >> 8 | (value & 0x0000FF0000000000UL) >> 24 |
                   (value & 0x00FF000000000000UL) >> 40 | (value & 0xFF00000000000000UL) >> 56;
        }
        public static UInt64 MSB(UInt64 n)
        {
            if (n == 0)
                return 0;

            int msb = 0;
            while (n != 0)
            {
                n = n / 2;
                msb++;
            }

            return (UInt64)1 << (msb-1);
        }


    }

}
